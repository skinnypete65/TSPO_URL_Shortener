// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: topurls.proto

package analytics

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on TopUrlsRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TopUrlsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TopUrlsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TopUrlsRequestMultiError,
// or nil if none found.
func (m *TopUrlsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TopUrlsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() < 1 {
		err := TopUrlsRequestValidationError{
			field:  "Page",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetLimit() < 1 {
		err := TopUrlsRequestValidationError{
			field:  "Limit",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return TopUrlsRequestMultiError(errors)
	}

	return nil
}

// TopUrlsRequestMultiError is an error wrapping multiple validation errors
// returned by TopUrlsRequest.ValidateAll() if the designated constraints
// aren't met.
type TopUrlsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TopUrlsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TopUrlsRequestMultiError) AllErrors() []error { return m }

// TopUrlsRequestValidationError is the validation error returned by
// TopUrlsRequest.Validate if the designated constraints aren't met.
type TopUrlsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TopUrlsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TopUrlsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TopUrlsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TopUrlsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TopUrlsRequestValidationError) ErrorName() string { return "TopUrlsRequestValidationError" }

// Error satisfies the builtin error interface
func (e TopUrlsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTopUrlsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TopUrlsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TopUrlsRequestValidationError{}

// Validate checks the field values on Pagination with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Pagination) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Pagination with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PaginationMultiError, or
// nil if none found.
func (m *Pagination) ValidateAll() error {
	return m.validate(true)
}

func (m *Pagination) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Next

	// no validation rules for Previous

	// no validation rules for RecordPerPage

	// no validation rules for CurrentPage

	// no validation rules for TotalPage

	if len(errors) > 0 {
		return PaginationMultiError(errors)
	}

	return nil
}

// PaginationMultiError is an error wrapping multiple validation errors
// returned by Pagination.ValidateAll() if the designated constraints aren't met.
type PaginationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaginationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaginationMultiError) AllErrors() []error { return m }

// PaginationValidationError is the validation error returned by
// Pagination.Validate if the designated constraints aren't met.
type PaginationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaginationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaginationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaginationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaginationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaginationValidationError) ErrorName() string { return "PaginationValidationError" }

// Error satisfies the builtin error interface
func (e PaginationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPagination.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaginationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaginationValidationError{}

// Validate checks the field values on TopUrlData with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TopUrlData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TopUrlData with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TopUrlDataMultiError, or
// nil if none found.
func (m *TopUrlData) ValidateAll() error {
	return m.validate(true)
}

func (m *TopUrlData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LongUrl

	// no validation rules for ShortUrl

	// no validation rules for FollowCount

	// no validation rules for CreateCount

	if len(errors) > 0 {
		return TopUrlDataMultiError(errors)
	}

	return nil
}

// TopUrlDataMultiError is an error wrapping multiple validation errors
// returned by TopUrlData.ValidateAll() if the designated constraints aren't met.
type TopUrlDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TopUrlDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TopUrlDataMultiError) AllErrors() []error { return m }

// TopUrlDataValidationError is the validation error returned by
// TopUrlData.Validate if the designated constraints aren't met.
type TopUrlDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TopUrlDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TopUrlDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TopUrlDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TopUrlDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TopUrlDataValidationError) ErrorName() string { return "TopUrlDataValidationError" }

// Error satisfies the builtin error interface
func (e TopUrlDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTopUrlData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TopUrlDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TopUrlDataValidationError{}

// Validate checks the field values on TopUrlsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TopUrlsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TopUrlsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TopUrlsResponseMultiError, or nil if none found.
func (m *TopUrlsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TopUrlsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTopUrlData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TopUrlsResponseValidationError{
						field:  fmt.Sprintf("TopUrlData[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TopUrlsResponseValidationError{
						field:  fmt.Sprintf("TopUrlData[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TopUrlsResponseValidationError{
					field:  fmt.Sprintf("TopUrlData[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TopUrlsResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TopUrlsResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TopUrlsResponseValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TopUrlsResponseMultiError(errors)
	}

	return nil
}

// TopUrlsResponseMultiError is an error wrapping multiple validation errors
// returned by TopUrlsResponse.ValidateAll() if the designated constraints
// aren't met.
type TopUrlsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TopUrlsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TopUrlsResponseMultiError) AllErrors() []error { return m }

// TopUrlsResponseValidationError is the validation error returned by
// TopUrlsResponse.Validate if the designated constraints aren't met.
type TopUrlsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TopUrlsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TopUrlsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TopUrlsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TopUrlsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TopUrlsResponseValidationError) ErrorName() string { return "TopUrlsResponseValidationError" }

// Error satisfies the builtin error interface
func (e TopUrlsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTopUrlsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TopUrlsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TopUrlsResponseValidationError{}
