// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	domain "analytics_service/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// PaginationService is an autogenerated mock type for the PaginationService type
type PaginationService struct {
	mock.Mock
}

// GetPaginationInfo provides a mock function with given fields: table, paginationParams
func (_m *PaginationService) GetPaginationInfo(table string, paginationParams domain.PaginationParams) (domain.Pagination, error) {
	ret := _m.Called(table, paginationParams)

	if len(ret) == 0 {
		panic("no return value specified for GetPaginationInfo")
	}

	var r0 domain.Pagination
	var r1 error
	if rf, ok := ret.Get(0).(func(string, domain.PaginationParams) (domain.Pagination, error)); ok {
		return rf(table, paginationParams)
	}
	if rf, ok := ret.Get(0).(func(string, domain.PaginationParams) domain.Pagination); ok {
		r0 = rf(table, paginationParams)
	} else {
		r0 = ret.Get(0).(domain.Pagination)
	}

	if rf, ok := ret.Get(1).(func(string, domain.PaginationParams) error); ok {
		r1 = rf(table, paginationParams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPaginationService creates a new instance of PaginationService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPaginationService(t interface {
	mock.TestingT
	Cleanup(func())
}) *PaginationService {
	mock := &PaginationService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
