// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: url.proto

package url

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on LongUrlRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LongUrlRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LongUrlRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LongUrlRequestMultiError,
// or nil if none found.
func (m *LongUrlRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LongUrlRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetLongUrl()) < 1 {
		err := LongUrlRequestValidationError{
			field:  "LongUrl",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return LongUrlRequestMultiError(errors)
	}

	return nil
}

// LongUrlRequestMultiError is an error wrapping multiple validation errors
// returned by LongUrlRequest.ValidateAll() if the designated constraints
// aren't met.
type LongUrlRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LongUrlRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LongUrlRequestMultiError) AllErrors() []error { return m }

// LongUrlRequestValidationError is the validation error returned by
// LongUrlRequest.Validate if the designated constraints aren't met.
type LongUrlRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LongUrlRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LongUrlRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LongUrlRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LongUrlRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LongUrlRequestValidationError) ErrorName() string { return "LongUrlRequestValidationError" }

// Error satisfies the builtin error interface
func (e LongUrlRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLongUrlRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LongUrlRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LongUrlRequestValidationError{}

// Validate checks the field values on UrlDataResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UrlDataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UrlDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UrlDataResponseMultiError, or nil if none found.
func (m *UrlDataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UrlDataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LongUrl

	// no validation rules for ShortUrl

	if len(errors) > 0 {
		return UrlDataResponseMultiError(errors)
	}

	return nil
}

// UrlDataResponseMultiError is an error wrapping multiple validation errors
// returned by UrlDataResponse.ValidateAll() if the designated constraints
// aren't met.
type UrlDataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UrlDataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UrlDataResponseMultiError) AllErrors() []error { return m }

// UrlDataResponseValidationError is the validation error returned by
// UrlDataResponse.Validate if the designated constraints aren't met.
type UrlDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UrlDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UrlDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UrlDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UrlDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UrlDataResponseValidationError) ErrorName() string { return "UrlDataResponseValidationError" }

// Error satisfies the builtin error interface
func (e UrlDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUrlDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UrlDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UrlDataResponseValidationError{}

// Validate checks the field values on ShortUrlRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ShortUrlRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShortUrlRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShortUrlRequestMultiError, or nil if none found.
func (m *ShortUrlRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ShortUrlRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetShortUrl()) < 1 {
		err := ShortUrlRequestValidationError{
			field:  "ShortUrl",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ShortUrlRequestMultiError(errors)
	}

	return nil
}

// ShortUrlRequestMultiError is an error wrapping multiple validation errors
// returned by ShortUrlRequest.ValidateAll() if the designated constraints
// aren't met.
type ShortUrlRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShortUrlRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShortUrlRequestMultiError) AllErrors() []error { return m }

// ShortUrlRequestValidationError is the validation error returned by
// ShortUrlRequest.Validate if the designated constraints aren't met.
type ShortUrlRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShortUrlRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShortUrlRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShortUrlRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShortUrlRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShortUrlRequestValidationError) ErrorName() string { return "ShortUrlRequestValidationError" }

// Error satisfies the builtin error interface
func (e ShortUrlRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShortUrlRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShortUrlRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShortUrlRequestValidationError{}

// Validate checks the field values on LongUrlResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LongUrlResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LongUrlResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LongUrlResponseMultiError, or nil if none found.
func (m *LongUrlResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LongUrlResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LongUrl

	if len(errors) > 0 {
		return LongUrlResponseMultiError(errors)
	}

	return nil
}

// LongUrlResponseMultiError is an error wrapping multiple validation errors
// returned by LongUrlResponse.ValidateAll() if the designated constraints
// aren't met.
type LongUrlResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LongUrlResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LongUrlResponseMultiError) AllErrors() []error { return m }

// LongUrlResponseValidationError is the validation error returned by
// LongUrlResponse.Validate if the designated constraints aren't met.
type LongUrlResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LongUrlResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LongUrlResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LongUrlResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LongUrlResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LongUrlResponseValidationError) ErrorName() string { return "LongUrlResponseValidationError" }

// Error satisfies the builtin error interface
func (e LongUrlResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLongUrlResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LongUrlResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LongUrlResponseValidationError{}
