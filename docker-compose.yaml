services:
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: "url_shortener_db"
      POSTGRES_USER: "user"
      POSTGRES_PASSWORD: "user"
    ports:
      - "5440:5432"
    volumes:
      - pg_vol:/var/lib/postgresql/data
    networks:
      - service_network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready", "-d", "url_shortener_db" ]
      interval: 5s
      timeout: 5s
      retries: 10

  url_shortener_service:
    build: ./url_shortener_service
    environment:
      ENV: "local"

      DATABASE_USERNAME: "user"
      DATABASE_PASSWORD: "user"
      DATABASE_HOST: "postgres"
      DATABASE_PORT: "5432"
      DATABASE_NAME: "url_shortener_db"

      REDIS_HOST: "redis"
      REDIS_PORT: "6379"
      REDIS_PASSWORD: "redis"

      KAFKA_ADDRS: "kafka1:9092"
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "localhost:8001/api/healthcheck" ]
      start_period: 5s
      interval: 10s
      timeout: 10s
      retries: 10
    networks:
      - service_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
      kafka1:
        condition: service_healthy

  analytics_service:
    build: ./analytics_service
    environment:
      ENV: "local"

      CLICKHOUSE_USERNAME: "user"
      CLICKHOUSE_PASSWORD: "user"
      CLICKHOUSE_HOST: "clickhouse"
      CLICKHOUSE_PORT: "9000"
      CLICKHOUSE_DATABASE: "default"
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "localhost:8002/api/healthcheck" ]
      start_period: 5s
      interval: 10s
      timeout: 10s
      retries: 10
    networks:
      - service_network
    depends_on:
      clickhouse:
        condition: service_healthy

  api_gateway:
    build: ./api_gateway
    ports:
      - "8000:8000"
    environment:
      ENV: "local"

      URL_SERVICE_HOST: "url_shortener_service"
      URL_SERVICE_PORT: "8101"

      ANALYTICS_SERVICE_HOST: "analytics_service"
      ANALYTICS_SERVICE_PORT: "8102"

      SERVER_DOMAIN: "localhost:8000"

      RATE_LIMIT_BURST_SIZE: "1000"
      RATE_LIMIT_TOKEN_PER_SECOND: "1000"
    networks:
      - service_network
    depends_on:
      url_shortener_service:
        condition: service_healthy
      analytics_service:
        condition: service_healthy

  redis:
    image: bitnami/redis:latest
    ports:
      - "6379:6379"
    volumes:
      - redis_vol:/bitnami/redis/data
    environment:
      - REDIS_PASSWORD=redis
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 10s
      timeout: 10s
      retries: 10
    networks:
      - service_network

  clickhouse:
    image: clickhouse/clickhouse-server
    ports:
      - "18123:8123"
    environment:
      CLICKHOUSE_USER: user
      CLICKHOUSE_PASSWORD: user
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "localhost:8123/ping" ]
      interval: 10s
      timeout: 10s
      retries: 10
    networks:
      - service_network
    volumes:
      - clickhouse_vol:/var/lib/clickhouse/

  zoo1:
    image: confluentinc/cp-zookeeper:7.3.2
    hostname: zoo1
    container_name: zoo1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zoo1:2888:3888
    networks:
      - service_network

  kafka1:
    image: confluentinc/cp-kafka:7.3.2
    hostname: kafka1
    container_name: kafka1
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9999:9999"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:19092,EXTERNAL://${DOCKER_HOST_IP}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.2}
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    networks:
      - service_network
    depends_on:
      - zoo1
    healthcheck:
      test: nc -z localhost 9092 || exit -1
      start_period: 10s
      interval: 10s
      timeout: 10s
      retries: 10

  frontend:
    build: ./frontend
    ports:
      - "80:80"

volumes:
  pg_vol:
  redis_vol:
  clickhouse_vol:

networks:
  service_network:
    driver: bridge